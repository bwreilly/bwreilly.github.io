<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: search | Pragmatic Geographer]]></title>
  <link href="http://bwreilly.github.io/blog/categories/search/atom.xml" rel="self"/>
  <link href="http://bwreilly.github.io/"/>
  <updated>2013-08-28T08:44:54-07:00</updated>
  <id>http://bwreilly.github.io/</id>
  <author>
    <name><![CDATA[Ben Reilly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing search (Haystack) in Django]]></title>
    <link href="http://bwreilly.github.io/blog/2013/07/21/testing-search-haystack-in-django/"/>
    <updated>2013-07-21T19:33:00-07:00</updated>
    <id>http://bwreilly.github.io/blog/2013/07/21/testing-search-haystack-in-django</id>
    <content type="html"><![CDATA[<p><a href="https://docs.djangoproject.com/en/dev/topics/testing/overview/">Django&rsquo;s build-in testing framework</a> is extremely handy. As long as you use the ORM with a supported data store, a test database is used for the duration of the tests and is cleaned up in between unit tests. There is no need for elaborate mocking &ndash; something I had grown accustom to in .NET.</p>

<p>Here is a quick sample, edited for brevity:</p>

<p>``` bash
$ ./manage.py test appname -v 2</p>

<p>Creating test database for alias &lsquo;default&rsquo; (&lsquo;test_projectname&rsquo;)…
Syncing&hellip;
Creating tables &hellip;
test_first (projectname.test.SampleTestClass) &hellip; ok
test_second (projectname.test.SampleTestClass) &hellip; ok
test_third (projectname.test.SampleTestClass) &hellip; ok
Ran 3 tests in 1.260s
OK
Destroying test database for alias &lsquo;default&rsquo; (&lsquo;test_projectname&rsquo;)…
```</p>

<p>But if you are using some external source of data, it is necessary to create a mock or some fake environment (as Django does).</p>

<p><a href="http://haystacksearch.org/">Haystack</a> is a handy library that abstracts out the details of various search engines. You get some powerful features build into something like <a href="http://www.elasticsearch.org/">Elasticsearch</a> &ndash; high availability, full text search, spelling correct, <em>more like this</em>, etc &ndash; in some functions and data structures familiar to Django using developers.</p>

<p>But if you are <a href="https://en.wikipedia.org/wiki/Integration_testing">integration testing</a>, and you should be &ndash; the tests are calling your views directly and your views are updating or retrieving data from an external search engine, you are going to potentially have a bad time. Stuff will be persisted between unit tests and your results will be likely be inconsistent.</p>

<p>The solution is pretty simple actually. Fire up a new index, override the settings such that the new index is the target for the Haystack calls for the duration of tests, and clear the index between tests.</p>

<p>``` python
TEST_INDEX = {</p>

<pre><code>'default': {
    'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
    'URL': 'http://127.0.0.1:9200/',
    'TIMEOUT': 60 * 10,
    'INDEX_NAME': 'test_index',
},
</code></pre>

<p>}</p>

<p>@override_settings(HAYSTACK_CONNECTIONS=TEST_INDEX)
class BaseTestCase(TestCase):</p>

<pre><code>def setUp(self):
    haystack.connections.reload('default')
    super(BaseTestCase, self).setUp()

def tearDown(self):
    call_command('clear_index', interactive=False, verbosity=0)
</code></pre>

<p>```
<a href="https://gist.github.com/bwreilly/6050981">Gist</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Tracing for Water Quality Assessment]]></title>
    <link href="http://bwreilly.github.io/blog/2009/08/13/graph-tracing-for-water-quality-assessment/"/>
    <updated>2009-08-13T19:09:00-07:00</updated>
    <id>http://bwreilly.github.io/blog/2009/08/13/graph-tracing-for-water-quality-assessment</id>
    <content type="html"><![CDATA[<p>My <a href="http://localhost:4000/blog/2008/09/16/programmatically-tracing-a-network-in-arcgis/">last interlude</a> with tracing the water system involved looking for hydrologic hazards &ndash; specifically other potential sources of water that could confound maintenance efforts.</p>

<p>Apparently I impressed someone enough with it to get a new trace-oriented project having to do with water quality. I&rsquo;ll have a second part to this talking about my first run at it and a subsequent refactoring that I&rsquo;m extremely happy with, but first I wanted to mention how I was documenting it.</p>

<p>As far as I can tell, the corporate standard for documentation is Microsoft Word documents. At best, these have a relatively easy to navigate table of contents and the document is stored at the same location as the topic. At worst, it has neither attribute or doesn&rsquo;t exist &ndash; there is no practical difference between those two situations really. No one will ever find them &ndash; which for development projects is especially problematic.</p>

<p>The Don&rsquo;t Repeat Yourself (DRY) principle applies outside single projects. There were some things I really wanted for the documentation I was going to produce for the product.</p>

<ul>
<li>Fast, built in search. Amazing the difference this makes.</li>
<li>Something you could put up on the web with little to no fuss, but wasn&rsquo;t actually a public facing website.</li>
<li>Allowed all kinds of markup, images, other resources.</li>
<li>Wiki-style editing &ndash; who changed what, when, and some measure of version control.</li>
<li>Plaintext or in some easily parsed format.</li>
<li>I could quickly convert it into Word if I caught too much flak for not using it</li>
</ul>


<p>What I eventually settled on is called <a href="http://www.tiddlywiki.com/">TiddlyWiki</a> (Google, Bing, Yahoo!..I&rsquo;m just certain there is a rule Web2.0 stuff requires a childish name for success). Its one HTML document, thus very portable, with a bunch of JavaScript that implements all the functionality I wanted above. It also apparently has a lively plugin community that I haven&rsquo;t had time to peruse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Tracing a Network in ArcGIS]]></title>
    <link href="http://bwreilly.github.io/blog/2008/09/16/programmatically-tracing-a-network-in-arcgis/"/>
    <updated>2008-09-16T19:11:00-07:00</updated>
    <id>http://bwreilly.github.io/blog/2008/09/16/programmatically-tracing-a-network-in-arcgis</id>
    <content type="html"><![CDATA[<p>Recently I was tasked with tracing a water network, and after studying a previous programmer&rsquo;s work on the subject, I realized the solution is just a modified tree algorithm that is largely language independent.</p>

<p>The trick is a recursive function that continues to call itself until it has gone down the totality of a single path. When it can&rsquo;t keep going &ndash; because it reaches the end of the line or because you convince the program it is the end of the line &ndash; it hops back one function call and tries to take an unvisited path. If it finds one, it repeats the whole process.</p>

<p>The ArcObjects API contains the extensions for Network and Utility Network tools, but as far as I can tell, those are mostly for listening for trace events rather than starting your own. Since a network like that is just a modified topology (it inherits from ESRI&rsquo;s topology object), you can use ITopology to create a TopologyGraph which allows access to the Edges and Nodes required.</p>

<p>But you don&rsquo;t need to use C#/VB.NET/VBA to pull this off. It would be possible with the API ESRI provides with its Python scripting object (IDispatch), as that contains start and end points in its Geometry object, or by creating your own node/tree structure.</p>
]]></content>
  </entry>
  
</feed>
