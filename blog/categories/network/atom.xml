<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: network | Pragmatic Geographer]]></title>
  <link href="http://bwreilly.github.io/blog/categories/network/atom.xml" rel="self"/>
  <link href="http://bwreilly.github.io/"/>
  <updated>2013-08-28T08:50:24-07:00</updated>
  <id>http://bwreilly.github.io/</id>
  <author>
    <name><![CDATA[Ben Reilly]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducting (belatedly) nx_spatial]]></title>
    <link href="http://bwreilly.github.io/blog/2011/02/27/introducting-belatedly-nx-spatial/"/>
    <updated>2011-02-27T20:00:00-08:00</updated>
    <id>http://bwreilly.github.io/blog/2011/02/27/introducting-belatedly-nx-spatial</id>
    <content type="html"><![CDATA[<p>
It's been more or less done a while, but here is finally a blog post about it.</p>


<p>
<a href="https://bitbucket.org/gallipoli/nx_spatial">nx_spatial</a> is a collection of addon functions for the <a href="http://networkx.lanl.gov/index.html">networkx</a> python graph library. What can you do with it?</p>


<ol>
<li>Load GIS formats into <a href="http://networkx.lanl.gov/reference/introduction.html">networkx graphs</a> (where you can do all sorts of <a href="http://networkx.lanl.gov/reference/index.html">crazy analytics</a> on them)</li>
<li>Perform upstream and downstream traces with stopping points.</li>
<li>Set sources and find/repair edges that don't have the correct to/from nodes.</li>
</ol>


<p>
Example from the <a href="https://bitbucket.org/gallipoli/nx_spatial/wiki/Home">wiki</a>:</p>


<p><code>python
import nx_spatial as ns
net = ns.read_shp('/shapes/lines.shp')
net.edges() [[(1.0, 1.0), (2.0, 2.0)], [(2.0, 2.0), (3.0, 3.0)], [(0.9, 0.9), (4.0, 2.0)]]
net.nodes() [(1.0, 1.0), (2.0, 2.0), (3.0, 3.0), (0.9, 0.9), (4.0, 2.0)]
source = (2.0, 2.0)
ns.setdirection(net, source)
net.edges() [[(2.0, 2.0), (1.0, 1.0)], [(2.0, 2.0), (3.0, 3.0)], [(0.9, 0.9), (4.0, 2.0)]]
</code></p>

<p>
Available on <a href="http://pypi.python.org/pypi/nx_spatial/0.3dev">pypi</a> or <a href="https://bitbucket.org/gallipoli/nx_spatial/wiki/Home">bitbucket</a>. Eventually I want to integrate it with networkx trunk (loading shapefiles is already in 1.4).</p>


<p style="font-size: 10px;">
<a href="http://posterous.com/">Posted via email</a>  from <a href="http://pragmaticgeographer.posterous.com/introducing-belatedly-nxspatial">The Pragmatic Geographer</a> </p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geometric Network Geoprocessing]]></title>
    <link href="http://bwreilly.github.io/blog/2010/07/21/geometric-network-geoprocessing/"/>
    <updated>2010-07-21T19:04:00-07:00</updated>
    <id>http://bwreilly.github.io/blog/2010/07/21/geometric-network-geoprocessing</id>
    <content type="html"><![CDATA[<p><div class="posterous_autopost">
I&rsquo;ve been hammering away at a GIS migration project that has been going  on far longer than anyone expected it might take, but I&rsquo;ve gotten the opportunity to hack away at some Python to more or less fix a problem I found on <a href="http://www.thegisforum.com/forums/t/7672.aspx">TheGISForum</a>:</p>

<p><blockquote class="posterous_medium_quote">
I  currently have a geometric network that I&rsquo;ve been working with  using  the Utility Network Analyst tools. However, I&rsquo;ve been trying to  perform  a few tasks that I&rsquo;ve noticed the Network Analyst tools provide,  but  the Utility Network Analyst does not.
Specifically, I want to  place barriers at all locations specified by a  point feature class &ndash; a  functionality provided by the &ldquo;Add Locations&rdquo;  tool in the Network  Analyst Toolset.
Is there a way to use the network analyst tools  on a geometric network?</blockquote></p>

<p>The answer, sadly, is no. As far as I can tell, ESRI has not released any geoprocessing  tools for their Geometric Network.
But it is possible to roll-your-own  solution to get the same kind of tools by using existing open source  libraries. I have a <a href="http://bitbucket.org/gallipoli/utilitynetwork/">work-in-progress project</a> along these exact lines.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Graph Tracing for Water Quality Assessment]]></title>
    <link href="http://bwreilly.github.io/blog/2009/08/13/graph-tracing-for-water-quality-assessment/"/>
    <updated>2009-08-13T19:09:00-07:00</updated>
    <id>http://bwreilly.github.io/blog/2009/08/13/graph-tracing-for-water-quality-assessment</id>
    <content type="html"><![CDATA[<p>My <a href="http://localhost:4000/blog/2008/09/16/programmatically-tracing-a-network-in-arcgis/">last interlude</a> with tracing the water system involved looking for hydrologic hazards &ndash; specifically other potential sources of water that could confound maintenance efforts.</p>

<p>Apparently I impressed someone enough with it to get a new trace-oriented project having to do with water quality. I&rsquo;ll have a second part to this talking about my first run at it and a subsequent refactoring that I&rsquo;m extremely happy with, but first I wanted to mention how I was documenting it.</p>

<p>As far as I can tell, the corporate standard for documentation is Microsoft Word documents. At best, these have a relatively easy to navigate table of contents and the document is stored at the same location as the topic. At worst, it has neither attribute or doesn&rsquo;t exist &ndash; there is no practical difference between those two situations really. No one will ever find them &ndash; which for development projects is especially problematic.</p>

<p>The Don&rsquo;t Repeat Yourself (DRY) principle applies outside single projects. There were some things I really wanted for the documentation I was going to produce for the product.</p>

<ul>
<li>Fast, built in search. Amazing the difference this makes.</li>
<li>Something you could put up on the web with little to no fuss, but wasn&rsquo;t actually a public facing website.</li>
<li>Allowed all kinds of markup, images, other resources.</li>
<li>Wiki-style editing &ndash; who changed what, when, and some measure of version control.</li>
<li>Plaintext or in some easily parsed format.</li>
<li>I could quickly convert it into Word if I caught too much flak for not using it</li>
</ul>


<p>What I eventually settled on is called <a href="http://www.tiddlywiki.com/">TiddlyWiki</a> (Google, Bing, Yahoo!..I&rsquo;m just certain there is a rule Web2.0 stuff requires a childish name for success). Its one HTML document, thus very portable, with a bunch of JavaScript that implements all the functionality I wanted above. It also apparently has a lively plugin community that I haven&rsquo;t had time to peruse.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programmatically Tracing a Network in ArcGIS]]></title>
    <link href="http://bwreilly.github.io/blog/2008/09/16/programmatically-tracing-a-network-in-arcgis/"/>
    <updated>2008-09-16T19:11:00-07:00</updated>
    <id>http://bwreilly.github.io/blog/2008/09/16/programmatically-tracing-a-network-in-arcgis</id>
    <content type="html"><![CDATA[<p>Recently I was tasked with tracing a water network, and after studying a previous programmer&rsquo;s work on the subject, I realized the solution is just a modified tree algorithm that is largely language independent.</p>

<p>The trick is a recursive function that continues to call itself until it has gone down the totality of a single path. When it can&rsquo;t keep going &ndash; because it reaches the end of the line or because you convince the program it is the end of the line &ndash; it hops back one function call and tries to take an unvisited path. If it finds one, it repeats the whole process.</p>

<p>The ArcObjects API contains the extensions for Network and Utility Network tools, but as far as I can tell, those are mostly for listening for trace events rather than starting your own. Since a network like that is just a modified topology (it inherits from ESRI&rsquo;s topology object), you can use ITopology to create a TopologyGraph which allows access to the Edges and Nodes required.</p>

<p>But you don&rsquo;t need to use C#/VB.NET/VBA to pull this off. It would be possible with the API ESRI provides with its Python scripting object (IDispatch), as that contains start and end points in its Geometry object, or by creating your own node/tree structure.</p>
]]></content>
  </entry>
  
</feed>
