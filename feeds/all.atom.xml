<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>The Pragmatic Geographer</title><link href="https://bwreilly.github.io/" rel="alternate"></link><link href="https://bwreilly.github.io/feeds/all.atom.xml" rel="self"></link><id>https://bwreilly.github.io/</id><updated>2023-12-15T13:44:00-05:00</updated><entry><title>Conway's Law and The Ecology of Freedom</title><link href="https://bwreilly.github.io/conway-ecology.html" rel="alternate"></link><published>2023-12-15T13:44:00-05:00</published><updated>2023-12-15T13:44:00-05:00</updated><author><name>Ben Reilly</name></author><id>tag:bwreilly.github.io,2023-12-15:/conway-ecology.html</id><summary type="html">&lt;p&gt;Intersection of some of the earliest and latest human activity.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Melvin Conway invented the term &lt;a href="https://en.wikipedia.org/wiki/Coroutine"&gt;coroutines&lt;/a&gt; and was heavily involved in the development of &lt;a href="https://en.wikipedia.org/wiki/MUMPS"&gt;MUMPS&lt;/a&gt;, a fairly arcane programming language still used in the medical/health record industry. But perhaps his most famous contribution, at least in systems and software organization circles, is &lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law"&gt;Conway's Law&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Organizations, who design systems, are constrained to produce designs which are copies of the communication structures of those organizations&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's hard to avoid seeing it when you become aware of it. Why does Facebook have those specific items in its side panel? Better than even odds it matches VP level subgroups within the larger organization. &lt;/p&gt;
&lt;p&gt;One example I vividly recall was several years ago at a &lt;a href="https://www.pspython.com/app/"&gt;Seattle Python&lt;/a&gt; meetup. I asked an Uber employee to what extent they used the language: "Oh, half the engineering group actively writes in Python. But not the other half. It's from way back at the start of the company, when they outsourced the Marketplace" An early organizational decision effectively dictated technical ones (&lt;a href="https://www.uber.com/en-CA/blog/tech-stack-part-one-foundation/"&gt;Seemingly confirmed by Uber's Blog here&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;But is this just limited to organizations that design systems?&lt;/p&gt;
&lt;p&gt;I was reminded of Conway's Law while I was reading &lt;a href="https://bookshop.org/p/books/the-dawn-of-everything-a-new-history-of-humanity-david-graeber/15873078"&gt;&lt;em&gt;The Dawn of Everything&lt;/em&gt;&lt;/a&gt; by David Graeber and David Wengrow. It's a fascinating work that throws a lot of assumptions about early human civilization into question, based on archeological evidence produced in the last few decades. &lt;/p&gt;
&lt;p&gt;The chapter "The Ecology of Freedom" is about early farmers, and how our records of them suggest not a linear path of foraging -&amp;gt; cultivation -&amp;gt; farming -&amp;gt; states, but rather a dabbling with occasions of people abandoning farming or conciously resisting practicing it (and why not, foraging often gave you better bang for your buck).&lt;/p&gt;
&lt;p&gt;The title of their chapter comes from a book by Murray Bookchin, and it's the footnote they have referencing his work that jumped out at me:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;...we cannot follow his own ideas about human prehistory or the origins of agriculture, which are based on information that is now many decades out of date. We do, however, find much to learn from his basic insight: &lt;strong&gt;that human engagements with the biosphere are always strongly conditioned by the types of social relationships and social systems that people form among themselves&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(emphasis mine)&lt;/p&gt;
&lt;p&gt;I found it fascinating that a correspondance between the social relationships of software/systems engineers and the products they produce would echo some of the earliest known activities of our species&lt;/p&gt;
&lt;p&gt;Despite hundreds of years of technological innovation and an overarching economic system that demands efficiency at seemingly all costs, there is no escaping the fact human social interactions and communiction cannot be entirely &lt;a href="https://en.wikipedia.org/wiki/Scientific_management"&gt;Taylorized&lt;/a&gt; out of the story of how we build things, and what they look like when they are finished.&lt;/p&gt;
&lt;p&gt;As deeply alianating and dehumanizing that system can be - &lt;a href="https://www.vanityfair.com/style/2023/06/ted-chiang-on-how-to-best-think-about-about-ai"&gt;Ted Chiang famously likens it&lt;/a&gt; to the doomsday AI of science fiction imagination, but already here and doing damage without any machine intelligence needed - that this aspect of the creator(s) shows up, even if only in internal systems, is heartening.&lt;/p&gt;</content><category term="Organization"></category><category term="history"></category><category term="software"></category><category term="social science"></category></entry><entry><title>Crunch Mode Does Not Work</title><link href="https://bwreilly.github.io/crunch-mode.html" rel="alternate"></link><published>2014-04-14T00:00:00-05:00</published><updated>2014-04-14T00:00:00-05:00</updated><author><name>Ben Reilly</name></author><id>tag:bwreilly.github.io,2014-04-14:/crunch-mode.html</id><summary type="html">&lt;p&gt;You'll need to fix everything later, or even rewrite it.&lt;/p&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://chadfowler.com/blog/2014/01/22/the-crunch-mode-antipattern/"&gt;Killing the Crunch Mode Antipattern&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you want a &lt;a href="http://www.slideshare.net/leadandtransform/knowledge-worker-productivity"&gt;“knowledge worker”&lt;/a&gt; to be as ineffective and produce the lowest level of quality possible, &lt;a href="http://www.ncbi.nlm.nih.gov/books/NBK19958/"&gt;deprive them of their sleep&lt;/a&gt; and hold them to an unrealistic deadline….&lt;/p&gt;
&lt;p&gt;&lt;a href="http://legacy.igda.org/why-crunch-modes-doesnt-work-six-lessons"&gt;It makes people lazy and less productive&lt;/a&gt;. This may seem ironic, but when someone puts in heroic levels of effort, they start to place less value on each minute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The last crunch mode I experienced virtually none of the code could be salvaged. We did a reasonable review of the work and realized more than half would need to be significantly refactored.&lt;/p&gt;
&lt;p&gt;It turns out that there has been some study around when a project should be rewritten vs. being subject to an extensive refactoring. It does depend, but generally the cut-off is about 20-25% – if you need to change more than that, you are likely better off just rewriting it (&lt;a href="http://www.cs.umd.edu/~basili/publications/journals/J70.pdf"&gt;Thomas, Delis, Basili, 1997&lt;/a&gt;).&lt;/p&gt;</content><category term="Software"></category><category term="history"></category><category term="software"></category><category term="social science"></category></entry><entry><title>REST and File Uploads/Attachments</title><link href="https://bwreilly.github.io/rest-uploads.html" rel="alternate"></link><published>2013-07-23T13:44:00-05:00</published><updated>2013-07-23T13:44:00-05:00</updated><author><name>Ben Reilly</name></author><id>tag:bwreilly.github.io,2013-07-23:/rest-uploads.html</id><summary type="html">&lt;p&gt;File uploads in a REST application&lt;/p&gt;</summary><content type="html">&lt;p&gt;Your web application will support uploading files. At first glance, this is an action and you might consider working with it as an RPC endpoint rather than REST. The upload could refer to a verb rather than a noun.&lt;/p&gt;
&lt;p&gt;There isn’t anything really wrong with this, but I would argue there are significant advantages with going with it as a noun (REST resource). Here are a few:&lt;/p&gt;
&lt;h3&gt;Staging an upload to external datastore&lt;/h3&gt;
&lt;p&gt;An upload may not be directly to you, and it might not be used by the requesting client – signed S3 forms, one-time URL endpoints, other protocols like Bittorrent, and other mechanisms that allow direct client uploads.&lt;/p&gt;
&lt;p&gt;Example: You &lt;code&gt;POST&lt;/code&gt; to create an &lt;code&gt;upload&lt;/code&gt; resource.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;upload_to_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com/one/time/endpoint/hashhashhash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;signed_token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blahblahblah&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;expires&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2013-07-12T19:10:19.491Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;etc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;...and it returns the &lt;code&gt;upload&lt;/code&gt; resource you created. It's not the raw file, but rather useful metadata about it (including the actual raw file location).&lt;/p&gt;
&lt;h3&gt;Tracking/auditing – both internally and externally&lt;/h3&gt;
&lt;p&gt;What if a user wants to see what uploads are currently in progress? All of the successful ones? The failures? Those are all also useful metrics internally as well. But as above you have an &lt;code&gt;upload&lt;/code&gt; resource now, so you can retrieve it with a &lt;code&gt;GET&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;createuser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com/user/1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;modifieduser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com/user/1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;createdate&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2013-07-12T19:10:19.491Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;modifieduser&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2013-07-12T19:10:19.491Z&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Attaching additional resources as a means of post-upload action&lt;/h3&gt;
&lt;p&gt;The file being uploaded is unlikely to exist in a vacuum. You will have related resources and possibly related actions. You can stick that stuff on here too. Consider, for instance, that you want to send alerts to some people when the upload is complete:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;subscribers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com/user/1234&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com/user/288&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com/user/3&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;etc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;...&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Explicit vs. implicit&lt;/h3&gt;
&lt;p&gt;Bottom line – your upload has state information. You are probably capturing it anyway in logs or other resources. If you have some subscribers as above, you want to make that information explicit, and in many cases, client controlled.&lt;/p&gt;</content><category term="Software"></category><category term="REST"></category><category term="web"></category><category term="software"></category><category term="code"></category></entry><entry><title>Testing Search (Haystack) in Django</title><link href="https://bwreilly.github.io/search-django-testing.html" rel="alternate"></link><published>2013-07-21T13:44:00-05:00</published><updated>2013-07-21T13:44:00-05:00</updated><author><name>Ben Reilly</name></author><id>tag:bwreilly.github.io,2013-07-21:/search-django-testing.html</id><summary type="html">&lt;p&gt;Testing search functionality with Django&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/dev/topics/testing/overview/"&gt;Django’s build-in testing framework&lt;/a&gt; is extremely handy. As long as you use the ORM with a supported data store, a test database is used for the duration of the tests and is cleaned up in between unit tests. There is no need for elaborate mocking – something I had grown accustom to in .NET.&lt;/p&gt;
&lt;p&gt;Here is a quick sample, edited for brevity:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$&lt;span class="w"&gt; &lt;/span&gt;./manage.py&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;appname&lt;span class="w"&gt; &lt;/span&gt;-v&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;

Creating&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_projectname&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;…
Syncing...
Creating&lt;span class="w"&gt; &lt;/span&gt;tables&lt;span class="w"&gt; &lt;/span&gt;...
test_first&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;projectname.test.SampleTestClass&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;ok
test_second&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;projectname.test.SampleTestClass&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;ok
test_third&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;projectname.test.SampleTestClass&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;...&lt;span class="w"&gt; &lt;/span&gt;ok
Ran&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;tests&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;.260s
OK
Destroying&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;database&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;alias&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_projectname&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;…
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But if you are using some external source of data, it is necessary to create a mock or some fake environment (as Django does).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://haystacksearch.org/"&gt;Haystack&lt;/a&gt; is a handy library that abstracts out the details of various search engines. You get some powerful features build into something like &lt;a href="http://www.elasticsearch.org/"&gt;Elasticsearch&lt;/a&gt; – high availability, full text search, spelling correct, more like this, etc – in some functions and data structures familiar to Django using developers.&lt;/p&gt;
&lt;p&gt;But if you are &lt;a href="https://en.wikipedia.org/wiki/Integration_testing"&gt;integration testing&lt;/a&gt;, the tests are calling your views directly and your views are updating or retrieving data from an external search engine, you are going to potentially have a bad time. Stuff will be persisted between unit tests and your results will be likely be inconsistent.&lt;/p&gt;
&lt;p&gt;The solution is pretty simple actually. Fire up a new index, override the settings such that the new index is the target for the Haystack calls for the duration of tests, and clear the index between tests.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;TEST_INDEX&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://127.0.0.1:9200/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TIMEOUT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;INDEX_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test_index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;override_settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HAYSTACK_CONNECTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TEST_INDEX&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;BaseTestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;haystack&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BaseTestCase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tearDown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;call_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clear_index&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;verbosity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://gist.github.com/bwreilly/6050981"&gt;GIST here&lt;/a&gt;&lt;/p&gt;</content><category term="Software"></category><category term="software"></category><category term="search"></category><category term="testing"></category><category term="code"></category></entry></feed>